<div id="comments-list">
    {{#commentList}}
	<div id="comments-{{id}}" class="card m-2">
		<div class="card-header">
            {{nickname}}

            <!-- 수정 버튼 -->
            <button type="button"
                    class="btn btn-outline-primary btn-sm"
                    data-bs-toggle="modal"
                    data-bs-target="#comment-edit-modal"
                    data-bs-id="{{id}}"
                    data-bs-nickname="{{nickname}}"
                    data-bs-body="{{body}}"
                    data-bs-article-id="{{articleId}}"
            >
                수정
           </button>

            <!-- 삭제 버튼 -->
            <button type="button"
                    class="btn btn-outline-danger btn-sm comment-delete-btn"
                    data-comment-id="{{id}}"}>
                    삭제
            </button>

        </div>
		<div class="card-body">
			{{body}}
		</div>
	</div>
    {{/commentList}}

    {{^commentList}}
    <div class="card m-2">
        <div class="card-body">
            <marquee>댓글이 없습니다.</marquee>
        </div>
    </div>
    {{/commentList}}
</div>

<!-- The Modal -->
<div class="modal" id="comment-edit-modal">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">댓글 수정</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <!-- newComment.musatche 수정 폼 복사 -->
                <form>
                    <div class="mb-3">
                        <label class="form-label">닉네임</label>
                        <input id="edit-comment-nickname"
                               class="form-control form-control-sm"
                               type="text"/>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">댓글내용</label>
                        <textarea id="edit-comment-body"
                                  class="form-control form-control-sm"
                                  rows="3"
                                  style="resize: none;"></textarea>
                    </div>
                    <input type="hidden" id="edit-comment-article-id"> <!-- 메인글 id-->
                    <input type="hidden" id="edit-comment-id" > <!-- 댓글 id -->
                    <button type="button"
                            id="comment-update-btn1"
                            class="btn btn-outline-warning btn sm"
                            style="font-size: 14px;">수정하기</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    {
        //  모달 요소 선택
        const commentEditModal = document.querySelector("#comment-edit-modal");
        // 모달 이벤트 감지
        commentEditModal.addEventListener('show.bs.modal', event => {
            // console.log('모달이 열림')
            // 모달이 열릴 때 콜백 함수의 인수에서 트리거 버튼을 선택한다.
            // relatedTarget은 모달에서 이벤트가 실행된 객체를 얻어온다.
            const button = event.relatedTarget;
            // data-bs-* 데이터 가져오기
            const id = button.getAttribute('data-bs-id');
            const nickname = button.getAttribute('data-bs-nickname');
            const body = button.getAttribute('data-bs-body');
            const articleId = button.getAttribute('data-bs-article-id');
            //console.log('id: ' + id, ', nickname: ' + nickname +', body: ' + body + ', articleId: ' + articleId);
            document.querySelector('#edit-comment-nickname').value = nickname;
            document.querySelector('#edit-comment-body').value = body;
            document.querySelector('#edit-comment-article-id').value = articleId;
            document.querySelector('#edit-comment-id').value = id;
        });
    }

 // 댓글 수정 이벤트 처리
    {
        const commentUpdateBtn = document.querySelector("#comment-update-btn1");
        commentUpdateBtn.addEventListener('click', () => {
            console.log('수정버튼 클릭');
            const comment = {
                nickname: document.querySelector('#edit-comment-nickname').value,
                body: document.querySelector('#edit-comment-body').value,
                article_id: document.querySelector('#edit-comment-article-id').value,
                id: document.querySelector('#edit-comment-id').value
            };
            console.log(comment);
            // 컨트롤러에 요창할 url을 만든다.
            // @PatchMapping("/api/comments/{id}")
            const url = '/api/comments/' + comment.id;
            // console.log(url);

            // fetch ajax를 이용해서 REST api를 호출한다.
            fetch(url, {
                method: "PATCH", // PATCH(수정) 요청, 대문자로
                body: JSON.stringify(comment), // 수정한 댓글 객체를 json으로 변경한다.
                headers: {
                    'Content-Type' : 'application/json' // 컨트롤러로 JSON 데이터가 넘어감을 알려준다.
                }
            }).then(response => {
                const msg = response.ok ? '댓글이 수정되었습니다.' : '댓글 수정에 실패했습니다.';
                alert(msg);
                location.reload();
            })
        });
    }

//  댓글 삭제 이벤트 처리
    {
        // 삭제 버튼들을 선택한다.
        const commentDeleteBtns = document.querySelectorAll('.comment-delete-btn');
        commentDeleteBtns.forEach(btn => {
            // click 이벤트가 실행된 삭제 버튼을 찾아서 삭제 기능을 실행한다.
            btn.addEventListener('click', event => {
                // console.log('삭제 버튼이 클릭되었습니다.')
                // 삭제 이벤트가 발생된 삭제 버튼을 선택한다.
                // secElement와
                // const commentDeleteBtn = event.srcElement;
                const commentDeleteBtn = event.target;
                // 삭제 버튼이 클릭된 댓글의 id를 가져온다.
                const commentId = commentDeleteBtn.getAttribute('data-comment-id');
                // console.log(`${commentId}번 댓글의 삭제 버튼이 클릭되었습니다.`)
                // 컨트롤러에 요청할 url을 만든다.
                // @DeleteMapping("/api/comments/{id}"}
                const url = '/api/comments/' + commentId;
                //console.log(url);

                // fetch ajax를 이용해서 REST api를 호출한다.
                fetch(url, {
                    method: 'DELETE' // DELETE 요청, 대문자로
                }).then(response => {/*
                    const msg = response.ok ? '댓글이 삭제되었습니다.' : '댓글 삭제에 실패했습니다.';
                    alert(msg);
                    location.reload();
                    */
                    if(!response.ok){
                        alert('댓글 삭제에 실패했습니다.');
                        return
                    }
                    // then()으로 왔다면 댓글은 이미 데이터베이스에서 삭제가 된 상태이다.
                    // 댓글 삭제 성공 시 삭제한 댓글을 화면에서 지운다.
                    const target = document.querySelector(`#comments-${commentId}`);
                    target.remove();
                });
            });
        });
    }
</script>